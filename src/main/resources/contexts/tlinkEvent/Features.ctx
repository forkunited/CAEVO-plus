context util = EventTLink(initScript="/util/Util.ctx", initOnce="true");
context modelsEventTLinkDet = EventTLink(initScript="/tlinkEvent/methods/Deterministic_TBD.ctx", initOnce="true", initOverrideByName="true");

ts_fn head = Head();
ts_fn after2 = NGramContext(type="AFTER", n="2");
ts_fn before2 = NGramContext(type="BEFORE", n="2");
ts_fn afterS2 = NGramContext(type="AFTER", n="2", sentenceBoundaryMode="SQUEEZE");
ts_fn beforeS2 = NGramContext(type="BEFORE", n="2", sentenceBoundaryMode="SQUEEZE");
ts_fn beforeI1 = NGramContext(type="BEFORE_INCLUDING", n="1");
ts_fn afterI1 = NGramContext(type="AFTER_INCLUDING", n="1");
ts_fn beforeAfterS2 = NGramContext(type="BEFORE_AND_AFTER", n="2", sentenceBoundaryMode="SQUEEZE");
ts_fn inside1 = NGramInside(n="1");
ts_fn dep = DependencyRelation(mode="PARENTS_AND_CHILDREN");
ts_fn prep = PrepositionOfClause();
ts_str_fn strDef = String(cleanFn="LowerCaseCleanFn");
ts_str_fn strTrim = String(cleanFn="TrimCleanFn");
ts_str_fn str = String(cleanFn="TrimCleanFn");
ts_str_fn pos = PoS();
ts_str_fn nlpLemma = TokenAnnotation(annotationType="lemma");
ts_str_fn lemma = WordNetLemma();
ts_str_fn synset = WordNetSynset();
ts_str_fn sentPos = SentencePosition();
ts_str_fn depStr = TokenSpanPathStr(mode="ALL", pathLength="1", spanFn1=${dep}, strFn=${strDef});
ts_str_fn pred = PredicateSense();

feature fsToken = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=${strTrim});
feature fsTokenClean = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=${strDef});
feature fsTokenB = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=(${strDef} o ${inside1} o ${beforeS2}));
feature fsTokenA = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=(${strDef} o ${inside1} o ${afterS2}));
feature fsPos = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=${pos});
feature fsPosB = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=(${pos} o ${inside1} o ${beforeS2}));
feature fsPosBI = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=(${pos} o ${beforeI1}));
feature fsPosB2 = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=(${pos} o ${before2}));
feature fsPosA = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=(${pos} o ${inside1} o ${afterS2}));
feature fsPosAI = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=(${pos} o ${afterI1}));
feature fsPosA2 = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=(${pos} o ${after2}));
feature fsTense = EventMentionAttribute(mentionExtractor="Source", attribute="TIMEML_TENSE");
feature fsAspect = EventMentionAttribute(mentionExtractor="Source", attribute="TIMEML_ASPECT");
feature fsClass = EventMentionAttribute(mentionExtractor="Source", attribute="TIMEML_CLASS");
feature fsPolarity = EventMentionAttribute(mentionExtractor="Source", attribute="TIMEML_POLARITY");
feature fsModality = EventMentionAttribute(mentionExtractor="Source", attribute="MODALITY");
feature fsDep = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=${depStr});
feature fsPrep = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=(${strDef} o ${prep}));
feature fsLemma = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=${lemma});
feature fsSynset = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=${synset});
feature fsW2v = Word2Vec(tokenExtractor="Source", mode="VECTOR", fn=(${str} o ${head}));
feature fsSentPos = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=${sentPos});
feature fsSentPosPos = Conjunction(minFeatureOccurrence="2", features=(${fsSentPos}, ${fsPos}));
feature fsPred= TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Source", fn=(${pred} o ${head}));
feature ftToken = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=${strTrim});
feature ftTokenClean = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=${strDef});
feature ftTokenB = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=(${strDef} o ${inside1} o ${beforeS2}));
feature ftTokenA = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=(${strDef} o ${inside1} o ${afterS2}));
feature ftPos = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=${pos});
feature ftPosB = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=(${pos} o ${inside1} o ${beforeS2}));
feature ftPosBI = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=(${pos} o ${beforeI1}));
feature ftPosB2 = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=(${pos} o ${before2}));
feature ftPosA = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=(${pos} o ${inside1} o ${afterS2}));
feature ftPosAI = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=(${pos} o ${afterI1}));
feature ftPosA2 = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=(${pos} o ${after2}));
feature ftTense = EventMentionAttribute(mentionExtractor="Target", attribute="TIMEML_TENSE");
feature ftAspect = EventMentionAttribute(mentionExtractor="Target", attribute="TIMEML_ASPECT");
feature ftClass = EventMentionAttribute(mentionExtractor="Target", attribute="TIMEML_CLASS");
feature ftPolarity = EventMentionAttribute(mentionExtractor="Target", attribute="TIMEML_POLARITY");
feature ftModality = EventMentionAttribute(mentionExtractor="Target", attribute="MODALITY");
feature ftDep = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=${depStr});
feature ftPrep = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=(${strDef} o ${prep}));
feature ftLemma = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=${lemma});
feature ftSynset = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=${synset});
feature ftSentPos = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=${sentPos});
feature ftSentPosPos = Conjunction(minFeatureOccurrence="2", features=(${ftSentPos}, ${ftPos}));
feature ftW2v = Word2Vec(tokenExtractor="Target", mode="VECTOR", fn=(${str} o ${head}));
feature ftPred= TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Target", fn=(${pred} o ${head}));
feature fstToken = Conjunction(minFeatureOccurrence="2", features=(${fsToken}, ${ftToken}));
feature fstTokenClean = Conjunction(minFeatureOccurrence="2", features=(${fsTokenClean}, ${ftTokenClean}));
feature fstPos = Conjunction(minFeatureOccurrence="2", features=(${fsPos}, ${ftPos}));
feature fstTense = Conjunction(minFeatureOccurrence="2", features=(${fsTense}, ${ftTense}));
feature fstAspect = Conjunction(minFeatureOccurrence="2", features=(${fsAspect}, ${ftAspect}));
feature fstClass = Conjunction(minFeatureOccurrence="2", features=(${fsClass}, ${ftClass}));	
feature fstPolarity = Conjunction(minFeatureOccurrence="2", features=(${fsPolarity}, ${ftPolarity}));	
feature fstModality = Conjunction(minFeatureOccurrence="2", features=(${fsModality}, ${ftModality}));	
feature fstPosEq = Conjunction(mode="EQUALITY", minFeatureOccurrence="2", features=(${fsPos}, ${ftPos}));
feature fstTenseEq = Conjunction(mode="EQUALITY", minFeatureOccurrence="2", features=(${fsTense}, ${ftTense}));
feature fstAspectEq = Conjunction(mode="EQUALITY", minFeatureOccurrence="2", features=(${fsAspect}, ${ftAspect}));
feature fstClassEq = Conjunction(mode="EQUALITY", minFeatureOccurrence="2", features=(${fsClass}, ${ftClass}));	
feature fstPolarityEq = Conjunction(mode="EQUALITY", minFeatureOccurrence="2", features=(${fsPolarity}, ${ftPolarity}));	
feature fstModalityEq = Conjunction(mode="EQUALITY", minFeatureOccurrence="2", features=(${fsModality}, ${ftModality}));	
feature fstSentPos = Conjunction(minFeatureOccurrence="2", features=(${fsSentPos}, ${ftSentPos}));
feature fstPred = Conjunction(minFeatureOccurrence="2", features=(${fsPred}, ${ftPred}));
feature fdepPathEE = DependencyPath(minFeatureOccurrence="2", sourceTokenExtractor="Source", targetTokenExtractor="Target", useRelationTypes="true");
feature fconPathPosEE = ConstituencyPath(minFeatureOccurrence="2", sourceTokenExtractor="Source", targetTokenExtractor="Target", noLeaves="false");
feature fconPathEE = ConstituencyPath(minFeatureOccurrence="2", sourceTokenExtractor="Source", targetTokenExtractor="Target", noLeaves="true");
feature fdepTypeEE = DependencyPathType(sourceTokenExtractor="Source", targetTokenExtractor="Target");
feature fpredPathEE = PredicateArgumentPath(sourceTokenExtractor="Source", targetTokenExtractor="Target");
feature fpredPathNoSenseEE = PredicateArgumentPath(sourceTokenExtractor="Source", targetTokenExtractor="Target", useSenses="false");
feature fdomEE = ConstituencyParseRelation(sourceTokenExtractor="Source", targetTokenExtractor="Target");
feature fw2vSimEE = Word2Vec(sourceTokenExtractor="Source", targetTokenExtractor="Target", mode="SIMILARITY", fn=(${str} o ${head}));
feature fw2vDiffEE = Word2Vec(sourceTokenExtractor="Source", targetTokenExtractor="Target", mode="DIFFERENCE", fn=(${str} o ${head}));
feature fgenGov = MethodClassification(method=${modelsEventTLinkDet.genGov});
feature freichenbach = MethodClassification(method=${modelsEventTLinkDet.reichenbach});
feature frepGov = MethodClassification(method=${modelsEventTLinkDet.repGov});
feature fwordNet = MethodClassification(method=${modelsEventTLinkDet.wordNet});
