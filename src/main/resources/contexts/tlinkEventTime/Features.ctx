context util = EventTimeTLink(initScript="/util/Util.ctx", initOnce="true");
context modelsEventTimeTLinkDet = EventTimeTLink(initScript="/tlinkEventTime/methods/Deterministic_TBD.ctx", initOnce="true", initOverrideByName="true");

ts_fn head = Head();
ts_fn after2 = NGramContext(type="AFTER", n="2");
ts_fn before2 = NGramContext(type="BEFORE", n="2");
ts_fn afterS2 = NGramContext(type="AFTER", n="2", sentenceBoundaryMode="SQUEEZE");
ts_fn beforeS2 = NGramContext(type="BEFORE", n="2", sentenceBoundaryMode="SQUEEZE");
ts_fn beforeI1 = NGramContext(type="BEFORE_INCLUDING", n="1");
ts_fn afterI1 = NGramContext(type="AFTER_INCLUDING", n="1");
ts_fn beforeAfterS2 = NGramContext(type="BEFORE_AND_AFTER", n="2", sentenceBoundaryMode="SQUEEZE");
ts_fn inside1 = NGramInside(n="1");
ts_fn dep = DependencyRelation(mode="PARENTS_AND_CHILDREN");
ts_fn prep = PrepositionOfClause();
ts_str_fn strDef = String(cleanFn="LowerCaseCleanFn");
ts_str_fn strTrim = String(cleanFn="TrimCleanFn");
ts_str_fn str = String(cleanFn="TrimCleanFn");
ts_str_fn pos = PoS();
ts_str_fn nlpLemma = TokenAnnotation(annotationType="lemma");
ts_str_fn lemma = WordNetLemma();
ts_str_fn synset = WordNetSynset();
ts_str_fn sentPos = SentencePosition();
ts_str_fn depStr = TokenSpanPathStr(mode="ALL", pathLength="1", spanFn1=${dep}, strFn=${strDef});
ts_str_fn pred = PredicateSense();

feature feventToken = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=${strTrim});
feature feventTokenClean = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=${strDef});
feature feventTokenB = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=(${strDef} o ${inside1} o ${beforeS2}));
feature feventTokenA = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=(${strDef} o ${inside1} o ${afterS2}));
feature feventTokenBA = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=(${strDef} o ${inside1} o ${beforeAfterS2}));
feature feventPos = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=${pos});
feature feventPosB = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=(${pos} o ${inside1} o ${beforeS2}));
feature feventPosBI = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=(${pos} o ${beforeI1}));
feature feventPosB2 = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=(${pos} o ${before2}));
feature feventPosA = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=(${pos} o ${inside1} o ${afterS2}));
feature feventPosAI = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=(${pos} o ${afterI1}));
feature feventPosA2 = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=(${pos} o ${after2}));
feature feventTense = EventMentionAttribute(mentionExtractor="Event", attribute="TIMEML_TENSE");
feature feventAspect = EventMentionAttribute(mentionExtractor="Event", attribute="TIMEML_ASPECT");
feature feventClass = EventMentionAttribute(mentionExtractor="Event", attribute="TIMEML_CLASS");
feature feventPolarity = EventMentionAttribute(mentionExtractor="Event", attribute="TIMEML_POLARITY");
feature feventModality = EventMentionAttribute(mentionExtractor="Event", attribute="MODALITY");
feature feventDep = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=${depStr});
feature feventPrep = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=(${strDef} o ${prep}));
feature feventLemma = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=${lemma});
feature feventSynset = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=${synset});
feature feventSentPos = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=${sentPos});
feature feventSentPosPos = Conjunction(minFeatureOccurrence="2", features=(${feventSentPos}, ${feventPos}));
feature feventW2v = Word2Vec(tokenExtractor="Event", mode="VECTOR", fn=(${str} o ${head}));
feature feventPred= TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Event", fn=(${pred} o ${head}));
feature ftimeToken = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Time", fn=${strDef});
feature ftimeTokenh = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Time", fn=(${strDef} o ${head}));
feature ftimeSentPos = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Time", fn=${sentPos});
feature ftimePrep = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="Time", fn=(${strDef} o ${prep}));
feature ftimeW2v = Word2Vec(tokenExtractor="Time", mode="VECTOR", fn=(${str} o ${head}));
feature ftimeFunc = TimeExpressionAttribute(expressionExtractor="Time", attribute="TIMEML_DOCUMENT_FUNCTION");
feature feventTimeToken = Conjunction(minFeatureOccurrence="2", features=(${feventToken}, ${ftimeToken}));
feature ftokenPathET = TokenSpanFnDataVocab(scale="INDICATOR", minFeatureOccurrence="2", tokenExtractor="BetweenEventTime", fn=${strDef});
feature fdepPathET = DependencyPath(minFeatureOccurrence="2", sourceTokenExtractor="Event", targetTokenExtractor="Time", useRelationTypes="true");
feature fconPathET = ConstituencyPath(minFeatureOccurrence="2", sourceTokenExtractor="Event", targetTokenExtractor="Time", noLeaves="true");
feature fconPathPosET = ConstituencyPath(minFeatureOccurrence="2", sourceTokenExtractor="Event", targetTokenExtractor="Time", noLeaves="false");
feature fdepTypeET = DependencyPathType(sourceTokenExtractor="Event", targetTokenExtractor="Time");
feature fpredPathET = PredicateArgumentPath(sourceTokenExtractor="Event", targetTokenExtractor="Time");
feature fpredPathNoSenseET = PredicateArgumentPath(sourceTokenExtractor="Event", targetTokenExtractor="Time", useSenses="false");
feature fdomET = ConstituencyParseRelation(sourceTokenExtractor="Event", targetTokenExtractor="Time");
feature fw2vSimET = Word2Vec(sourceTokenExtractor="Event", targetTokenExtractor="Time", mode="SIMILARITY", fn=(${str} o ${head}));
feature fw2vDiffET = Word2Vec(sourceTokenExtractor="Event", targetTokenExtractor="Time", mode="DIFFERENCE", fn=(${str} o ${head}));
feature fadjET = MethodClassification(method=${modelsEventTimeTLinkDet.adjET});

feature ftfEventToken = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventToken}));
feature ftfEventTokenClean = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventTokenClean})); 
feature ftfEventTokenB = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventTokenB}));
feature ftfEventTokenA = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventTokenA}));
feature ftfEventTokenBA = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventTokenBA}));
feature ftfEventPos = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventPos}));
feature ftfEventPosB = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventPosB}));
feature ftfEventPosBI = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventPosBI}));
feature ftfEventPosB2 = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventPosB2}));
feature ftfEventPosA = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventPosA}));
feature ftfEventPosAI = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventPosAI}));
feature ftfEventPosA2 = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventPosA2}));
feature ftfEventTense = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventTense}));
feature ftfEventAspect = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventAspect}));
feature ftfEventClass = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventClass}));
feature ftfEventPolarity = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventPolarity}));
feature ftfEventModality = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventModality})); 
feature ftfEventDep = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventDep}));
feature ftfEventPrep = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventPrep}));
feature ftfEventLemma = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventLemma}));
feature ftfEventSynset = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventSynset}));
feature ftfEventSentPos = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventSentPos}));
feature ftfEventSentPosPos = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventSentPosPos}));
feature ftfEventW2v = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventW2v}));
feature ftfEventPred = Conjunction(minFeatureOccurrence="2", features=(${ftimeFunc}, ${feventPred}));

