context trainDevTestDataTlinkType = TLinkType(initScript="/tlinkType/data/LoadTrainDevTest.ctx", initOnce="true", initOverrideByName="true");
context rulesTlinkTypeTransitive = TLinkType(initScript="/tlinkType/rules/Transitive.ctx", initOnce="true");
context rulesTlinkTypeConverse = TLinkType(initScript="/tlinkType/rules/Converse.ctx", initOnce="true");
context featureSetsTlinkType = TLinkType(initScript="/tlinkType/featureSets/CAEVO_Fixed_Plus.ctx", initOnce="true", initOverrideByName="true");
context modelsTlinkTypeDet = TLinkType(initScript="/tlinkType/methods/Deterministic_TBD.ctx", initOnce="true", initOverrideByName="true");
context modelsTlinkTypeSl = TLinkType(initScript="/tlinkType/methods/SL_CAEVO_Fixed.ctx", initOnce="true", initOverrideByName="true");
context evalTlinkTypeSl = TLinkType(initScript="/tlinkType/evaluations/SL.ctx", initOnce="true", initOverrideByName="true");
context evalTlinkTypeDet = TLinkType(initScript="/tlinkType/evaluations/Deterministic_TBD.ctx", initOnce="true", initOverrideByName="true");
context methodRerankerTlinkType = MetaTLinkType(initScript="/tlinkType/methods/meta/Reranker_Perfect.ctx", initOnce="true", initOverrideByName="true");

structure_fn graphPaths2 = GraphPaths(length="2", ignoreTypes=("VAGUE"));
structure_fn graphPaths1 = GraphPaths(length="1", ignoreTypes=("VAGUE"));
structure_fn greedyTlinkTransitiveRules = GreedyStructureRules(rules=(${rulesTlinkTypeTransitive.rules}, ${rulesTlinkTypeConverse.rules}), 
                                                               splitFns=(${graphPaths2}, ${graphPaths1}), singleRuleSetPerIteration="true");

multi_classify_method ps = PrecedenceScoreByModel(methods=(${modelsTlinkTypeDet.adjET}, 
			                                             ${modelsTlinkTypeDet.timeTime},
			                                             ${modelsTlinkTypeDet.repGov}, 
			                                             ${modelsTlinkTypeDet.reichenbach}, 
			                                             ${modelsTlinkTypeDet.genGov}, 
			                                             ${modelsTlinkTypeDet.wordNet},
			                                             ${modelsTlinkTypeDet.reportingDCT}, 
			                                             ${modelsTlinkTypeSl.slETWS}, 
			                                             ${modelsTlinkTypeSl.slEED},
			                                             ${modelsTlinkTypeSl.slEEWS}, 
			                                             ${modelsTlinkTypeSl.slDCT}),                                   
                                    structurizers=(${trainDevTestDataTlinkType.docStructConserve}, 
                                    			   ${trainDevTestDataTlinkType.docStructConserve},
                                                   ${trainDevTestDataTlinkType.docStructConserve}, 
                                                   ${trainDevTestDataTlinkType.docStructConserve},
                                                   ${trainDevTestDataTlinkType.docStructConserve},
                                                   ${trainDevTestDataTlinkType.docStructConserve},
                                                   ${trainDevTestDataTlinkType.docStructConserve}, 
                                    			   ${trainDevTestDataTlinkType.docStructConserve},
                                                   ${trainDevTestDataTlinkType.docStructConserve}, 
                                                   ${trainDevTestDataTlinkType.docStructConserve},
                                                   ${trainDevTestDataTlinkType.docStructConserve}),
                                    baselineMethod=${modelsTlinkTypeDet.allVague},
                                    baselineStructurizer=${trainDevTestDataTlinkType.docStructConserve},
                                    precedenceModel=${methodRerankerTlinkType.reranker},
                                    structureTransformFn=${greedyTlinkTransitiveRules},
                                    threadStructure="true");
