context metaFeatures = MetaTLinkType(initScript="/tlinkType/MetaFeatures.ctx", initOnce="true", initOverrideByName="true");
context trainDevTestDataMetaTlinkType = MetaTLinkType(initScript="/tlinkType/data/meta/LoadTrainDevTest_SL.ctx", initOnce="true", initOverrideByName="true");

feature_set fs = FeatureSet(features=(${metaFeatures.fconstant}, 
                                      ${metaFeatures.fpredLabelMethod},
                                      ${metaFeatures.fpredTenseMethodSl},
                                      ${metaFeatures.fpredAspectMethodSl},
                                      ${metaFeatures.fpredClassMethodSl},
                                      ${metaFeatures.fpredPolarityMethodSl},
                                      ${metaFeatures.fpredModalityMethodSl},
                                      ${metaFeatures.fpredTenseEqMethodSl},
                                      ${metaFeatures.fpredAspectEqMethodSl},
                                      ${metaFeatures.fpredClassEqMethodSl},
                                      ${metaFeatures.fpredPolarityEqMethodSl},
                                      ${metaFeatures.fpredModalityEqMethodSl}), 
							initData=(${trainDevTestDataMetaTlinkType.trainData}));

data_features trainMatrix = DataFeatureMatrix(data=${trainDevTestDataMetaTlinkType.trainData}, features=${fs});

model slm=StanfordLinear() { array validLabels=("true", "false"); };

evaluation acc=Accuracy();
classify_method rerankerInit = SupervisedModel(model=${slm}, data=${trainMatrix}, trainEvaluation=${acc});
classify_method reranker = InitClassifyMethod(devData=${trainDevTestDataMetaTlinkType.devData}, method=${rerankerInit});
