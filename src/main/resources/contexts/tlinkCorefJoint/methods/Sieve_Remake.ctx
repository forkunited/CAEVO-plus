context rulesJointTransitive = EventTLink(initScript="/tlinkCorefJoint/rules/Transitive.ctx", initOnce="true");
context rulesJointTLinkConverse = EventTLink(initScript="/tlinkJoint/rules/Converse.ctx", initOnce="true");
context rulesJoint = EventTLink(initScript="/tlinkCorefJoint/rules/Joint.ctx", initOnce="true");
context modelsEventTLinkDet = EventTLink(initScript="/tlinkEvent/methods/Deterministic_TBD.ctx", initOnce="true", initOverrideByName="true");
context modelsEventTLinkYadll = EventTLink(initScript="/tlinkEvent/methods/YADLL_LR_CAEVO_Simple.ctx", initOnce="true", initOverrideByName="true");
context modelsEventTimeTLinkDet = EventTimeTLink(initScript="/tlinkEventTime/methods/Deterministic_TBD.ctx", initOnce="true", initOverrideByName="true");
context modelsEventTimeTLinkYadll = EventTimeTLink(initScript="/tlinkEventTime/methods/YADLL_LR_CAEVO_Simple.ctx", initOnce="true", initOverrideByName="true");
context modelsTimeTLinkDet = TimeTLink(initScript="/tlinkTime/methods/Deterministic_TBD.ctx", initOnce="true", initOverrideByName="true");
context evalEventTLinkDet = EventTLink(initScript="/tlinkEvent/evaluations/Deterministic_TBD.ctx", initOnce="true", initOverrideByName="true");
context evalEventTLinkYadll = EventTLink(initScript="/tlinkEvent/evaluations/YADLL.ctx", initOnce="true", initOverrideByName="true");
context evalEventTimeTLinkDet = EventTimeTLink(initScript="/tlinkEventTime/evaluations/Deterministic_TBD.ctx", initOnce="true", initOverrideByName="true");
context evalEventTimeTLinkYadll = EventTimeTLink(initScript="/tlinkEventTime/evaluations/YADLL.ctx", initOnce="true", initOverrideByName="true");
context evalTimeTLinkDet = TimeTLink(initScript="/tlinkTime/evaluations/Deterministic_TBD.ctx", initOnce="true", initOverrideByName="true");
context trainDevTestDataEventTLink = EventTLink(initScript="/tlinkEvent/data/LoadTrainDevTest.ctx", initOnce="true", initOverrideByName="true");
context trainDevTestDataEventTimeTLink = EventTimeTLink(initScript="/tlinkEventTime/data/LoadTrainDevTest.ctx", initOnce="true", initOverrideByName="true");
context trainDevTestDataTimeTLink = TimeTLink(initScript="/tlinkTime/data/LoadTrainDevTest.ctx", initOnce="true", initOverrideByName="true");

context modelsEventCorefDet = EventCoref(initScript="/corefEvent/methods/Deterministic.ctx", initOnce="true", initOverrideByName="true");
context modelsEventCorefYadllCT = EventCoref(initScript="/corefEvent/methods/YADLL_CTClone.ctx", initOnce="true", initOverrideByName="true");
context evalEventCorefYadllCT = EventCoref(initScript="/corefEvent/evaluations/YADLL_CTClone.ctx", initOnce="true", initOverrideByName="true");
context evalEventCorefDet = EventCoref(initScript="/corefEvent/evaluations/Deterministic.ctx", initOnce="true", initOverrideByName="true");
context trainDevTestDataEventCoref = EventCoref(initScript="/corefEvent/data/LoadTrainDevTest.ctx", initOnce="true", initOverrideByName="true");

structure_fn graphPaths2 = GraphPaths(length="2");
structure_fn graphPaths1 = GraphPaths(length="1", ignoreTypes=("VAGUE"));
structure_fn graphPaths1V = GraphPaths(length="1");
structure_fn greedyTlinkTransitiveRules = GreedyStructureRules(rules=(${rulesJointTransitive.rules}, ${rulesJointTLinkConverse.rules}, ${rulesJoint.rules}), 
                                                               splitFns=(${graphPaths2}, ${graphPaths1}, ${graphPaths1V}));

multi_classify_method sieve = Sieve(methods=(${modelsEventCorefYadllCT.yadllCoref70}, 
											 ${modelsEventCorefYadllCT.yadllCoref65}, 
                                             ${modelsEventCorefYadllCT.yadllCoref60},
                                             ${modelsEventCorefYadllCT.yadllCoref55},
                                             ${modelsEventCorefYadllCT.yadllCoref50},
                                             
                                             ${modelsEventTLinkDet.repGov}, ${modelsEventTLinkDet.reichenbach}, 
                                             ${modelsEventTLinkDet.genGov}, ${modelsEventTLinkDet.wordNet},
                                             ${modelsTimeTLinkDet.wordNet}, ${modelsTimeTLinkDet.timeTime},
                                             ${modelsEventTimeTLinkDet.adjET}, ${modelsEventTimeTLinkDet.reportingDCT}, 
                                             ${modelsEventTLinkDet.allVague}, 
                                             ${modelsTimeTLinkDet.allVague},
                                             ${modelsEventTimeTLinkDet.allVague},
                                             ${modelsEventTimeTLinkYadll.yadllWS}, ${modelsEventTimeTLinkYadll.yadllDCT}, ${modelsEventTLinkYadll.yadllWS}),                                   
                                    structurizers=(${trainDevTestDataEventCoref.docStructConserve}, 
                                                   ${trainDevTestDataEventCoref.docStructConserve},
                                                   ${trainDevTestDataEventCoref.docStructConserve},
                                                   ${trainDevTestDataEventCoref.docStructConserve},
                                                   ${trainDevTestDataEventCoref.docStructConserve},
                                    
                                                   ${trainDevTestDataEventTLink.docStructConserve}, ${trainDevTestDataEventTLink.docStructConserve},
                                                   ${trainDevTestDataEventTLink.docStructConserve}, ${trainDevTestDataEventTLink.docStructConserve},
                                                   ${trainDevTestDataTimeTLink.docStructConserve}, ${trainDevTestDataTimeTLink.docStructConserve},
                                                   ${trainDevTestDataEventTimeTLink.docStructConserve}, ${trainDevTestDataEventTimeTLink.docStructConserve},
                                                   ${trainDevTestDataEventTLink.docStructConserve}, 
                                                   ${trainDevTestDataTimeTLink.docStructConserve},
                                                   ${trainDevTestDataEventTimeTLink.docStructConserve}, 
                                                   ${trainDevTestDataEventTimeTLink.docStructConserve}, ${trainDevTestDataEventTimeTLink.docStructConserve}, ${trainDevTestDataEventTLink.docStructConserve}),
                                    permutationMeasures=(${evalEventCorefYadllCT.devYadllCoref70Precision}, 
                                                         ${evalEventCorefYadllCT.devYadllCoref65Precision}, 
                                                         ${evalEventCorefYadllCT.devYadllCoref60Precision}, 
                                                         ${evalEventCorefYadllCT.devYadllCoref55Precision}, 
                                                         ${evalEventCorefYadllCT.devYadllCoref50Precision},
                                    
                                                         ${evalEventTLinkDet.devRepGovPrecision}, ${evalEventTLinkDet.devReichenbachPrecision},
                                                         ${evalEventTLinkDet.devGenGovPrecision}, ${evalEventTLinkDet.devWordNetPrecision},
                                                         ${evalTimeTLinkDet.devWordNetPrecision}, ${evalTimeTLinkDet.devTimeTimePrecision},
                                                         ${evalEventTimeTLinkDet.devAdjETPrecision}, ${evalEventTimeTLinkDet.devReportingDCTPrecision}, 
                                                         ${evalEventTLinkDet.devAllVaguePrecision}, 
                                                         ${evalTimeTLinkDet.devAllVaguePrecision}, 
                                                         ${evalEventTimeTLinkDet.devAllVaguePrecision}, 
                                                         ${evalEventTimeTLinkYadll.devYadllWSPrecision}, ${evalEventTimeTLinkYadll.devYadllDCTPrecision}, ${evalEventTLinkYadll.devYadllWSPrecision}
                                    ),
                                    structureTransformFn=${greedyTlinkTransitiveRules},
                                    remakeData="true");
